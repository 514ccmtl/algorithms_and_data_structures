library(tidyverse)
library(caret)
knitr::opts_chunk$set(message = FALSE)
set.seed(20231101)
# train data
x <- rnorm(n = 300, mean = 3, sd = 1)
epsilon <- rnorm(n = 300)
y <- 0.5 + 0.1 * x + 0.2 * x^2 + epsilon
train <- data.frame(y, x, epsilon)
# test data
x <- rnorm(n = 300, mean = 3, sd = 1)
epsilon <- rnorm(n = 300)
y <- 0.5 + 0.1 * x + 0.2 * x^2 + epsilon
test <- data.frame(y, x)
x_grid <- seq(0, 6, by = 0.02)
knn <- function(x, y, x_grid, k) {
n <- length(x_grid)
predictions <- rep(NA, n)
for (i in 1:n) {
differences <- abs(x - x_grid[i])
nearest_indices <- order(differences)[1:k]
predictions[i] <- mean(y[nearest_indices])
}
return(data.frame(x_grid, predictions))
}
ggplot() +
geom_point(aes(x = x_grid, y = predictions, color = "blue"), data = knn(train$x, train$y, x_grid, 5)) +
geom_point(aes(x = x, y = y, color = "red"), data = train) +
scale_color_manual(labels = c("KNN k = 5", "Train Data"), values = c("blue", "red")) +
theme_minimal()
ggplot() +
geom_point(aes(x = x_grid, y = predictions, color = "blue"), data = knn(train$x, train$y, x_grid, 20)) +
geom_point(aes(x = x, y = y, color = "red"), data = train) +
scale_color_manual(labels = c("KNN k = 20", "Train Data"), values = c("blue", "red")) +
theme_minimal()
ggplot() +
geom_point(aes(x = x_grid, y = predictions, color = "blue"), data = knn(train$x, train$y, x_grid, 50)) +
geom_point(aes(x = x, y = y, color = "red"), data = train) +
scale_color_manual(labels = c("KNN k = 50", "Train Data"), values = c("blue", "red")) +
theme_minimal()
ggplot() +
geom_point(aes(x = x_grid, y = predictions, color = "blue"), data = knn(train$x, train$y, x_grid, 100)) +
geom_point(aes(x = x, y = y, color = "red"), data = train) +
scale_color_manual(labels = c("KNN k = 100", "Train Data"), values = c("blue", "red")) +
theme_minimal()
w_tricubic <- function(x0, xi) {
abs_x <- abs(x0 - xi)
max_abs_x <- max(abs_x)
return((1 - (abs_x / max_abs_x)^3)^3)
}
knn_weighted <- function(x, y, x_grid, k) {
n <- length(x_grid)
predictions <- rep(NA, n)
for (i in 1:n) {
differences <- abs(x - x_grid[i])
nearest_indices <- order(differences)[1:k]
weights <- w_tricubic(x_grid[i], x_grid[nearest_indices])
predictions[i] <- sum(weights * y[nearest_indices]) / sum(weights)
}
return(data.frame(x_grid, predictions))
}
ggplot() +
geom_point(aes(x = x_grid, y = predictions, color = "blue"), data = knn_weighted(train$x, train$y, x_grid, 5)) +
geom_point(aes(x = x, y = y, color = "red"), data = train) +
scale_color_manual(labels = c("KNN k = 5", "Train Data"), values = c("blue", "red")) +
theme_minimal()
ggplot() +
geom_point(aes(x = x_grid, y = predictions, color = "blue"), data = knn_weighted(train$x, train$y, x_grid, 20)) +
geom_point(aes(x = x, y = y, color = "red"), data = train) +
scale_color_manual(labels = c("KNN k = 20", "Train Data"), values = c("blue", "red")) +
theme_minimal()
ggplot() +
geom_point(aes(x = x_grid, y = predictions, color = "blue"), data = knn_weighted(train$x, train$y, x_grid, 50)) +
geom_point(aes(x = x, y = y, color = "red"), data = train) +
scale_color_manual(labels = c("KNN k = 50", "Train Data"), values = c("blue", "red")) +
theme_minimal()
ggplot() +
geom_point(aes(x = x_grid, y = predictions, color = "blue"), data = knn_weighted(train$x, train$y, x_grid, 100)) +
geom_point(aes(x = x, y = y, color = "red"), data = train) +
scale_color_manual(labels = c("KNN k = 100", "Train Data"), values = c("blue", "red")) +
theme_minimal()
ggplot() +
geom_point(aes(x = x_grid, y = predictions, color = "blue"), data = knn_linreg(train$x, train$y, x_grid, 5)) +
geom_point(aes(x = x, y = y, color = "red"), data = train) +
scale_color_manual(labels = c("KNN k = 5", "Train Data"), values = c("blue", "red")) +
theme_minimal()
knn_linreg <- function(x, y, x_grid, k) {
n <- length(x_grid)
predictions <- rep(NA, n)
for (i in 1:n) {
differences <- abs(x - x_grid[i])
nearest_indices <- order(differences)[1:k]
weights <- w_tricubic(x_grid[i], x_grid[nearest_indices])
model <- lm(y[nearest_indices] ~ x[nearest_indices], weights = weights)
predictions[i] <- predict(model, newdata = data.frame(x_train = x_grid[i]))
}
return(data.frame(x_grid, predictions))
}
ggplot() +
geom_point(aes(x = x_grid, y = predictions, color = "blue"), data = knn_linreg(train$x, train$y, x_grid, 5)) +
geom_point(aes(x = x, y = y, color = "red"), data = train) +
scale_color_manual(labels = c("KNN k = 5", "Train Data"), values = c("blue", "red")) +
theme_minimal()
ggplot() +
geom_point(aes(x = x_grid, y = predictions, color = "blue"), data = knn_linreg(train$x, train$y, x_grid, 20)) +
geom_point(aes(x = x, y = y, color = "red"), data = train) +
scale_color_manual(labels = c("KNN k = 20", "Train Data"), values = c("blue", "red")) +
theme_minimal()
ggplot() +
geom_point(aes(x = x_grid, y = predictions, color = "blue"), data = knn_linreg(train$x, train$y, x_grid, 50)) +
geom_point(aes(x = x, y = y, color = "red"), data = train) +
scale_color_manual(labels = c("KNN k = 50", "Train Data"), values = c("blue", "red")) +
theme_minimal()
ggplot() +
geom_point(aes(x = x_grid, y = predictions, color = "blue"), data = knn_linreg(train$x, train$y, x_grid, 100)) +
geom_point(aes(x = x, y = y, color = "red"), data = train) +
scale_color_manual(labels = c("KNN k = 100", "Train Data"), values = c("blue", "red")) +
theme_minimal()
mse <- function(y_pred, y){
return(mean((y_pred-y)^2))
}
knn(train$x, train$y, x_grid, 5)
mse(knn(train$x, train$y, x_grid, 5)[2], test$y)
knn(train$x, train$y, x_grid, 5)[2]
class(knn(train$x, train$y, x_grid, 5)[2])
as.vector(knn(train$x, train$y, x_grid, 5)[2])
mse(as.vector(knn(train$x, train$y, x_grid, 5)[2]), test$y)
mse(c(1,2,3), c(1,1,1))
mse(as.vector(knn(train$x, train$y, x_grid, 5)[2]), as.vector(test$y))
test$y
class(test$y)
mse(knn(train$x, train$y, x_grid, 5)$predictions, as.vector(test$y))
mse(knn(train$x, train$y, x_grid, 5)$predictions, as.vector(test$y))
mse(knn(train$x, train$y, x_grid, 20)$predictions, as.vector(test$y))
mse(knn(train$x, train$y, x_grid, 50)$predictions, as.vector(test$y))
mse(knn(train$x, train$y, x_grid, 50)$predictions, as.vector(test$y))
mse(knn(train$x, train$y, x_grid, 100)$predictions, as.vector(test$y))
mse(knn_weighted(train$x, train$y, x_grid, 5)$predictions, as.vector(test$y))
mse(knn_weighted(train$x, train$y, x_grid, 20)$predictions, as.vector(test$y))
mse(knn_weighted(train$x, train$y, x_grid, 50)$predictions, as.vector(test$y))
mse(knn_weighted(train$x, train$y, x_grid, 5)$predictions, as.vector(test$y))
mse(knn_weighted(train$x, train$y, x_grid, 100)$predictions, as.vector(test$y))
mse(knn_linreg(train$x, train$y, x_grid, 5)$predictions, as.vector(test$y))
mse(knn_linreg(train$x, train$y, x_grid, 20)$predictions, as.vector(test$y))
mse(knn_linreg(train$x, train$y, x_grid, 50)$predictions, as.vector(test$y))
mse(knn_linreg(train$x, train$y, x_grid, 100)$predictions, as.vector(test$y))
pi
x <- c(1,2,3)
x * -1
?lgamma
estimate_binom <- function(data) {
n <- length(data)
mean <- mean(data)
theta_est <- 1 - (sum((data - mean) ^ 2) / sum(data))
n_est <- mean / theta_est
leave_one_out_theta <- rep(NA, n)
leave_one_out_n <- rep(NA, n)
for (i in 1:n) {
data_i <- data[-i]
leave_one_out_theta[i] <- 1 - (sum((data_i - mean(data_i)) ^ 2)  / sum(data_i))
leave_one_out_n[i] <- mean(data_i) / leave_one_out_theta[i]
}
theta_std_err <- sqrt((sum(leave_one_out_theta - mean(leave_one_out_theta))^2) * (n - 1) / n)
n_std_err <- sqrt((sum(leave_one_out_n - mean(leave_one_out_n))^2) * (n - 1) / n)
return(list("theta estimate" = theta_est, "theta std err" = theta_std_err, "N estimate" = n_est, "N std err" = n_std_err))
}
estimate_binom(data)
data <- scan("bugs.txt")
estimate_binom <- function(data) {
n <- length(data)
mean <- mean(data)
theta_est <- 1 - (sum((data - mean) ^ 2) / sum(data))
n_est <- mean / theta_est
leave_one_out_theta <- rep(NA, n)
leave_one_out_n <- rep(NA, n)
for (i in 1:n) {
data_i <- data[-i]
leave_one_out_theta[i] <- 1 - (sum((data_i - mean(data_i)) ^ 2)  / sum(data_i))
leave_one_out_n[i] <- mean(data_i) / leave_one_out_theta[i]
}
theta_std_err <- sqrt((sum(leave_one_out_theta - mean(leave_one_out_theta))^2) * (n - 1) / n)
n_std_err <- sqrt((sum(leave_one_out_n - mean(leave_one_out_n))^2) * (n - 1) / n)
return(list("theta estimate" = theta_est, "theta std err" = theta_std_err, "N estimate" = n_est, "N std err" = n_std_err))
}
estimate_binom(data)
max(x)
LETTERS
x[-2]
estimate_binom <- function(data) {
n <- length(data)
theta_est <- 1 - (sum((data - mean(data)) ^ 2) / mean(data))
n_est <- mean(data) / theta_est
leave_one_out_theta <- rep(NA, n)
leave_one_out_n <- rep(NA, n)
for (i in 1:n) {
leave_one_out_theta[i] <- 1 - (sum((data[-i] - mean(data[-i])) ^ 2)  / mean(data[-i]))
leave_one_out_n[i] <- mean(data[-i]) / leave_one_out_theta[i]
}
theta_std_err <- sqrt((sum(leave_one_out_theta - mean(leave_one_out_theta))^2) * (n - 1) / n)
n_std_err <- sqrt((sum(leave_one_out_n - mean(leave_one_out_n))^2) * (n - 1) / n)
return(list("theta estimate" = theta_est, "theta std err" = theta_std_err, "N estimate" = n_est, "N std err" = n_std_err))
}
estimate_binom(data)
estimate_binom <- function(data) {
n <- length(data)
theta_est <- 1 + sum(data) - (sum(data ^ 2) / sum(data))
n_est <- mean(data) / theta_est
leave_one_out_theta <- rep(NA, n)
leave_one_out_n <- rep(NA, n)
for (i in 1:n) {
leave_one_out_theta[i] <- 1 + sum(data[-i]) - (sum(data[-i] ^ 2) / sum(data[-i]))
leave_one_out_n[i] <- mean(data[-i]) / leave_one_out_theta[i]
}
theta_std_err <- sqrt((sum(leave_one_out_theta - mean(leave_one_out_theta))^2) * (n - 1) / n)
n_std_err <- sqrt((sum(leave_one_out_n - mean(leave_one_out_n))^2) * (n - 1) / n)
return(list("theta estimate" = theta_est, "theta std err" = theta_std_err, "N estimate" = n_est, "N std err" = n_std_err))
}
estimate_binom(data)
estimate_binom <- function(data) {
n <- length(data)
theta_est <- 1 - (sum((data - mean(data)) ^ 2) / sum(data))
n_est <- mean(data) / theta_est
leave_one_out_theta <- rep(NA, n)
leave_one_out_n <- rep(NA, n)
for (i in 1:n) {
leave_one_out_theta[i] <- 1 - (sum((data[-i] - mean(data[-i])) ^ 2)  / sum(data[-i]))
leave_one_out_n[i] <- mean(data[-i]) / leave_one_out_theta[i]
}
theta_std_err <- sqrt((sum(leave_one_out_theta - mean(leave_one_out_theta))^2) * (n - 1) / n)
n_std_err <- sqrt((sum(leave_one_out_n - mean(leave_one_out_n))^2) * (n - 1) / n)
return(list("theta estimate" = theta_est, "theta std err" = theta_std_err, "N estimate" = n_est, "N std err" = n_std_err))
}
estimate_binom(data)
?var
muhat <- NULL
sumx <- NULL
for (i in 1:10000) { # computation of the Venter estimates and sample sums
x <- rgamma(100,2)
muhat <- c(muhat,venter(x,tau=1/2))
sumx <- c(sumx,sum(x))
}
data <- scan("stamp.txt")
venter <- function(x, tau=1/2) {
x <- sort(x)
n <- length(x)
m <- ceiling(tau*n)
x1 <- x[1:(n-m+1)]
x2 <- x[m:n]
j <- c(1:(n-m+1))
len <- x2-x1
k <- min(j[len==min(len)])
(x[k]+x[k+m-1])/2
}
plot(density(data, bw = 0.0012))
venter(data, 0.9)
venter(data, 0.5)
venter(data, 0.1)
venter(data, 0.01)
mse <- function(y_pred, y){
return(mean((y_pred-y)^2))
}
mc_venter <- function(n, alpha, tau) {
sim_data <- rgamma(n, alpha)
return(venter(sim_data, tau))
}
set.seed(0)
N <- 10000
est_2_05_3 <- rep(NA, N)
for (i in 1:N) {
est_2_05_3[i] <- mc_venter(100, 2, 0.5)
}
mse_2_05_3 <- mse(est_2_05_3, 1)
est_2_01_3 <- rep(NA, N)
for (i in 1:N) {
est_2_01_3 <- mc_venter(100, 2, 0.1)
}
mse_2_01_3 <- mse(est_2_01_3, 1)
est_10_05_3 <- rep(NA, N)
for (i in 1:N) {
est_10_05_3 <- mc_venter(100, 10, 0.5)
}
mse_10_05_3 <- mse(est_10_05_3, 9)
est_10_01_3 <- rep(NA, N)
for (i in 1:N) {
est_10_01_3 <- mc_venter(100, 10, 0.1)
}
mse_10_01_3 <- mse(est_10_01_3, 9)
est_2_05_4 <- rep(NA, N)
for (i in 1:N) {
est_2_05_4[i] <- mc_venter(100, 2, 0.5)
}
mse_2_05_4 <- mse(est_2_05_4, 1)
est_2_01_4 <- rep(NA, N)
for (i in 1:N) {
est_2_01_4 <- mc_venter(100, 2, 0.1)
}
mse_2_01_4 <- mse(est_2_01_4, 1)
est_10_05_4 <- rep(NA, N)
for (i in 1:N) {
est_10_05_4 <- mc_venter(100, 10, 0.5)
}
mse_10_05_4 <- mse(est_10_05_4, 9)
est_10_01_4 <- rep(NA, N)
for (i in 1:N) {
est_10_01_4 <- mc_venter(100, 10, 0.1)
}
mse_10_01_4 <- mse(est_10_01_4, 9)
muhat <- NULL
sumx <- NULL
for (i in 1:10000) { # computation of the Venter estimates and sample sums
x <- rgamma(100,2)
muhat <- c(muhat,venter(x,tau=1/2))
sumx <- c(sumx,sum(x))
}
y <- min(muhat) + (max(muhat)-min(muhat))*c(0:5000)/5000 # range of y values for f(y)
fmuhat <- NULL
for (z in y) { # calculate f(y) for each y value defined above
fmuhat <- c(fmuhat,mean(dgamma(z,shape=200,scale=muhat/sumx)))
}
plot(y,fmuhat,type="l",ylab="density",lwd=3,col="red")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Example usage:
set.seed(42)
data <- rbinom(100, size = 1, prob = 0.3)  # Simulated binary data
result <- estimate_binomial_parameters(data)
cat("Method of Moments Estimation:\n")
cat("p_mom =", result$p_mom, "\n")
cat("q_mom =", result$q_mom, "\n")
cat("Jackknife Standard Error Estimates:\n")
cat("p_se =", result$p_se, "\n")
cat("q_se =", result$q_se, "\n")
# Function to estimate binomial parameters using Method of Moments and Jackknife
estimate_binomial_parameters <- function(data) {
n <- length(data)
# Method of Moments Estimation
p_mom <- mean(data) / length(data)
q_mom <- 1 - p_mom
# Jackknife Standard Error Estimation
p_jack <- numeric(n)
q_jack <- numeric(n)
for (i in 1:n) {
data_i <- data[-i]
p_jack[i] <- mean(data_i) / (n - 1)
q_jack[i] <- 1 - p_jack[i]
}
p_se <- sqrt((n - 1) / n * sum((p_jack - mean(p_jack))^2))
q_se <- sqrt((n - 1) / n * sum((q_jack - mean(q_jack))^2))
result <- list(
"p_mom" = p_mom,
"q_mom" = q_mom,
"p_se" = p_se,
"q_se" = q_se
)
return(result)
}
# Example usage:
set.seed(42)
data <- rbinom(100, size = 1, prob = 0.3)  # Simulated binary data
result <- estimate_binomial_parameters(data)
cat("Method of Moments Estimation:\n")
cat("p_mom =", result$p_mom, "\n")
cat("q_mom =", result$q_mom, "\n")
cat("Jackknife Standard Error Estimates:\n")
cat("p_se =", result$p_se, "\n")
cat("q_se =", result$q_se, "\n")
result
estimate_binom <- function(data) {
n <- length(data)
n_est <- mean(data) ^ 2 / (sd(data)^2 + mean(data) - mean(data)^2)
theta_est <- mean(data) / n_est
leave_one_out_theta <- rep(NA, n)
leave_one_out_n <- rep(NA, n)
for (i in 1:n) {
leave_one_out_n[i] <- mean(data[-i]) ^ 2 / (sd(data[-i])^2 + mean(data[-i]) - mean(data[-i])^2)
leave_one_out_theta[i] <- mean(data[-i]) / leave_one_out_n[i]
theta_std_err <- sqrt((sum(leave_one_out_theta - mean(leave_one_out_theta))^2) * (n - 1) / n)
n_std_err <- sqrt((sum(leave_one_out_n - mean(leave_one_out_n))^2) * (n - 1) / n)
return(list("theta estimate" = theta_est, "theta std err" = theta_std_err, "N estimate" = n_est, "N std err" = n_std_err))
}
estimate_binom <- function(data) {
n <- length(data)
n_est <- mean(data) ^ 2 / (sd(data)^2 + mean(data) - mean(data)^2)
theta_est <- mean(data) / n_est
leave_one_out_theta <- rep(NA, n)
leave_one_out_n <- rep(NA, n)
for (i in 1:n) {
leave_one_out_n[i] <- mean(data[-i]) ^ 2 / (sd(data[-i])^2 + mean(data[-i]) - mean(data[-i])^2)
leave_one_out_theta[i] <- mean(data[-i]) / leave_one_out_n[i]
}
theta_std_err <- sqrt((sum(leave_one_out_theta - mean(leave_one_out_theta))^2) * (n - 1) / n)
n_std_err <- sqrt((sum(leave_one_out_n - mean(leave_one_out_n))^2) * (n - 1) / n)
return(list("theta estimate" = theta_est, "theta std err" = theta_std_err, "N estimate" = n_est, "N std err" = n_std_err))
}
estimate_binom(data)
estimate_binom <- function(data) {
n <- length(data)
n_est <- mean(data) ^ 2 / var(data) + mean(data) - mean(data)^2)
estimate_binom <- function(data) {
n <- length(data)
n_est <- mean(data) ^ 2 / var(data) + mean(data) - mean(data)^2)
estimate_binom <- function(data) {
n <- length(data)
n_est <- mean(data) ^ 2 / (var(data) + mean(data) - mean(data)^2)
theta_est <- mean(data) / n_est
leave_one_out_theta <- rep(NA, n)
leave_one_out_n <- rep(NA, n)
for (i in 1:n) {
leave_one_out_n[i] <- mean(data[-i]) ^ 2 / (var(data[-i]) + mean(data[-i]) - mean(data[-i])^2)
leave_one_out_theta[i] <- mean(data[-i]) / leave_one_out_n[i]
}
theta_std_err <- sqrt((sum(leave_one_out_theta - mean(leave_one_out_theta))^2) * (n - 1) / n)
n_std_err <- sqrt((sum(leave_one_out_n - mean(leave_one_out_n))^2) * (n - 1) / n)
return(list("theta estimate" = theta_est, "theta std err" = theta_std_err, "N estimate" = n_est, "N std err" = n_std_err))
}
estimate_binom(data)
estimate_binom <- function(data) {
n <- length(data)
n_est <- mean(data) / (1 - var(data))
theta_est <- mean(data) / n_est
leave_one_out_theta <- rep(NA, n)
leave_one_out_n <- rep(NA, n)
for (i in 1:n) {
leave_one_out_n[i] <- mean(data[-i]) / (1 - var(data[-i]))
leave_one_out_theta[i] <- mean(data[-i]) / leave_one_out_n[i]
}
theta_std_err <- sqrt((sum(leave_one_out_theta - mean(leave_one_out_theta))^2) * (n - 1) / n)
n_std_err <- sqrt((sum(leave_one_out_n - mean(leave_one_out_n))^2) * (n - 1) / n)
return(list("theta estimate" = theta_est, "theta std err" = theta_std_err, "N estimate" = n_est, "N std err" = n_std_err))
}
estimate_binom(data)
estimate_binom <- function(data) {
n <- length(data)
n_est <- mean(data) / (1 - var(data))
theta_est <- mean(data) / n_est
leave_one_out_mean <- rep(NA, n)
leave_one_out_var <- rep(NA, n)
for (i in 1:n) {
leave_one_out_mean[i] <- mean(data[-i])
leave_one_out_var[i] <- var(data[-i])
}
mean_n <- mean(leave_one_out_mean)
mean_theta <- mean(leave_one_out_var)
theta_std_err <- sqrt((sum(leave_one_out_theta - mean(leave_one_out_theta))^2) * (n - 1) / n)
n_std_err <- sqrt((sum(leave_one_out_n - mean(leave_one_out_n))^2) * (n - 1) / n)
return(list("theta estimate" = theta_est, "theta std err" = theta_std_err, "N estimate" = n_est, "N std err" = n_std_err))
}
estimate_binom(data)
estimate_binom <- function(data) {
n <- length(data)
n_est <- mean(data) / (1 - var(data))
theta_est <- mean(data) / n_est
leave_one_out_theta <- rep(NA, n)
leave_one_out_n <- rep(NA, n)
for (i in 1:n) {
leave_one_out_n[i] <- mean(data[-i]) / (1 - var(data[-i]))
leave_one_out_theta[i] <- mean(data[-i]) / leave_one_out_n[i]
}
#mean_n <- mean(leave_one_out_mean)
#mean_theta <- mean(leave_one_out_var)
theta_std_err <- sqrt((sum(leave_one_out_theta - mean(leave_one_out_theta))^2) * (n - 1) / n)
n_std_err <- sqrt((sum(leave_one_out_n - mean(leave_one_out_n))^2) * (n - 1) / n)
return(list("theta estimate" = theta_est, "theta std err" = theta_std_err, "N estimate" = n_est, "N std err" = n_std_err))
}
estimate_binom(data)
data <- scan("bugs.txt")
estimate_binom <- function(data) {
n <- length(data)
theta_est <- 1 - (sum((data - mean(data)) ^ 2) / sum(data))
n_est <- mean(data) / theta_est
leave_one_out_theta <- rep(NA, n)
leave_one_out_n <- rep(NA, n)
for (i in 1:n) {
leave_one_out_theta[i] <- 1 - (sum((data[-i] - mean(data[-i])) ^ 2)  / sum(data[-i]))
leave_one_out_n[i] <- mean(data[-i]) / leave_one_out_theta[i]
}
theta_std_err <- sqrt((sum(leave_one_out_theta - mean(leave_one_out_theta))^2) * (n - 1) / n)
n_std_err <- sqrt((sum(leave_one_out_n - mean(leave_one_out_n))^2) * (n - 1) / n)
return(list("theta estimate" = theta_est, "theta std err" = theta_std_err, "N estimate" = n_est, "N std err" = n_std_err))
}
estimate_binom(data)
data
getwd()
x <- "2023-11-27 09:50"
y <- as.POSIXlt(x)
rm(list = ls())  # remove the existing environment
source("utils.R")
source("discriminant_analysis.R")
## Load the training and test data
train <- Load_data("./data/digits_train.txt")
test <- Load_data("./data/digits_test.txt")
x_train <- train$x
y_train <- train$y
x_test <- test$x
y_test <- test$y
priors <- Comp_priors(y_train, 10)
getwd()
plot(rpois(1000, 10) + 18)
plot(rpois(1000, 10) + 18)
plot(dpois(1000, 10) + 18)
plot(ppois(1000, 10) + 18)
hist(rpois(1000, 10) + 19)
hist(rpois(1000, 10) + 18)
getwd
getwd()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
reticulate::repl_python()
quarto check
reticulate::repl_python()
reticulate::repl_python()
